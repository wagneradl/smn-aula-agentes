# ====================================================================
# AGENTE DE PESQUISA E S√çNTESE
# ====================================================================
# Este agente realiza pesquisas em m√∫ltiplas fontes, re√∫ne informa√ß√µes
# e cria resumos concisos sobre um t√≥pico espec√≠fico.
# ====================================================================

# Importamos as bibliotecas necess√°rias
import os
import time
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from langchain.prompts import ChatPromptTemplate
from langchain_community.tools import WikipediaQueryRun
from langchain_community.utilities import WikipediaAPIWrapper
from langchain.agents import initialize_agent, Tool, AgentType

# Carregar configura√ß√µes do arquivo .env
load_dotenv()

# Chaves de API
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# ====================================================================
# PARTE 1: CONFIGURA√á√ÉO DAS FERRAMENTAS DE PESQUISA
# ====================================================================
# Definimos as fontes onde o agente poder√° buscar informa√ß√µes.
# ====================================================================

# Configurar ferramenta de busca na Wikipedia
wikipedia = WikipediaAPIWrapper(
    lang="pt",
    top_k_results=3,
    doc_content_chars_max=3000
)
wikipedia_tool = WikipediaQueryRun(api_wrapper=wikipedia)

# Fun√ß√£o para simular uma busca em documentos internos da empresa
# Em um cen√°rio real, isso se conectaria a uma base de documentos da empresa
def buscar_documentos_internos(query):
    """
    Simula uma busca em documentos internos da SMN.
    
    Args:
        query (str): Termo de busca
        
    Returns:
        str: Resultados encontrados
    """
    # Este √© apenas um exemplo - numa implementa√ß√£o real, voc√™ conectaria
    # a um sistema de gest√£o documental, SharePoint, etc.
    
    # Banco de dados simulado de documentos
    documentos = {
        "projeto": "Projeto Alpha: Iniciativa estrat√©gica para expans√£o da SMN no mercado latino-americano, com foco em sustentabilidade e inova√ß√£o digital. Lan√ßamento previsto para Q3 2025.",
        "processo": "Processo de aprova√ß√£o de novos fornecedores: 1) Solicita√ß√£o via portal, 2) An√°lise financeira, 3) Verifica√ß√£o de compliance, 4) Aprova√ß√£o final pelo comit√™ de compras.",
        "cliente": "Principais clientes da SMN incluem: Grupo Nova Era (setor de energia), TechFuture (tecnologia), EcoSolutions (sustentabilidade) e Cons√≥rcio Mobilidade Urbana.",
        "produto": "Linha de produtos 2025: SmartEco (efici√™ncia energ√©tica), DataConnect (an√°lise de dados integrada), GreenChain (rastreabilidade sustent√°vel) e Urban Solutions (solu√ß√µes para cidades inteligentes).",
        "equipe": "Estrutura organizacional: Diretoria Executiva (CEO, CFO, COO, CTO), Ger√™ncias (Projetos, Produtos, Opera√ß√µes, RH, Finan√ßas), Coordena√ß√µes e Equipes T√©cnicas especializadas por verticais."
    }
    
    # Buscar em cada documento
    resultados = []
    for tipo, conteudo in documentos.items():
        if query.lower() in tipo.lower() or any(termo in conteudo.lower() for termo in query.lower().split()):
            resultados.append(f"[{tipo.upper()}]: {conteudo}")
    
    if resultados:
        return "\n\n".join(resultados)
    else:
        return "Nenhum documento interno encontrado para esta consulta."

# ====================================================================
# PARTE 2: CONFIGURA√á√ÉO DO MODELO E AGENTE
# ====================================================================
# Configuramos o modelo de linguagem e definimos o agente que usar√°
# as ferramentas para realizar pesquisas.
# ====================================================================

# Inicializar o modelo de linguagem
modelo = ChatOpenAI(openai_api_key=OPENAI_API_KEY, model_name="gpt-3.5-turbo", temperature=0)

# Definir as ferramentas dispon√≠veis para o agente
ferramentas = [
    Tool(
        name="Busca na Wikipedia",
        func=wikipedia_tool.run,
        description="√ötil para obter informa√ß√µes gerais sobre conceitos, pessoas, lugares, eventos hist√≥ricos, etc. Use para t√≥picos de conhecimento p√∫blico e verific√°veis."
    ),
    Tool(
        name="Busca em Documentos Internos",
        func=buscar_documentos_internos,
        description="√ötil para obter informa√ß√µes espec√≠ficas sobre a SMN, como projetos, processos, produtos e clientes. Use para informa√ß√µes internas da empresa."
    )
]

# Inicializar o agente
agente = initialize_agent(
    tools=ferramentas,
    llm=modelo,
    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    verbose=True,  # Mostrar o processo de racioc√≠nio do agente (pode ser definido como False em produ√ß√£o)
    handle_parsing_errors=True
)

# ====================================================================
# PARTE 3: FUN√á√ÉO DE S√çNTESE
# ====================================================================
# Esta fun√ß√£o pega os resultados da pesquisa e cria um resumo conciso.
# ====================================================================

# Template para o prompt de s√≠ntese
template_sintese = """
Voc√™ √© um especialista em sintetizar informa√ß√µes complexas em resumos claros e concisos.

Com base nas informa√ß√µes a seguir, crie um resumo bem estruturado sobre o t√≥pico "{topico}".

Informa√ß√µes coletadas:
{informacoes}

Seu resumo deve:
1. Ter entre 3-5 par√°grafos
2. Come√ßar com uma vis√£o geral do t√≥pico
3. Destacar os pontos mais importantes
4. Organizar as informa√ß√µes de forma l√≥gica
5. Usar linguagem clara e direta
6. Incluir apenas informa√ß√µes presentes no texto acima

RESUMO:
"""

prompt_sintese = ChatPromptTemplate.from_template(template_sintese)

def sintetizar_informacoes(topico, informacoes):
    """
    Sintetiza informa√ß√µes coletadas em um resumo conciso.
    
    Args:
        topico (str): O t√≥pico da pesquisa
        informacoes (str): Informa√ß√µes coletadas
        
    Returns:
        str: Resumo sintetizado
    """
    # Criar o prompt
    mensagens = prompt_sintese.format_messages(
        topico=topico, 
        informacoes=informacoes
    )
    
    # Gerar o resumo
    resposta = modelo.invoke(mensagens)
    
    return resposta.content

# ====================================================================
# PARTE 4: FUN√á√ÉO PRINCIPAL DE PESQUISA
# ====================================================================
# Esta fun√ß√£o coordena o processo de pesquisa e s√≠ntese.
# ====================================================================

def pesquisar_e_sintetizar(topico):
    """
    Fun√ß√£o principal que realiza pesquisa e s√≠ntese sobre um t√≥pico.
    
    Args:
        topico (str): T√≥pico da pesquisa
        
    Returns:
        str: Resumo sintetizado
    """
    print(f"üîç Pesquisando sobre: {topico}")
    print("="*70)
    print("Fase 1: Coletando informa√ß√µes...")
    
    # Criar uma consulta para o agente
    consulta = f"Pesquise sobre '{topico}'. Busque tanto informa√ß√µes gerais quanto informa√ß√µes espec√≠ficas da SMN, se relevantes. Seja meticuloso e abrangente."
    
    try:
        # Executar o agente
        resultados = agente.run(consulta)
        
        print("\nFase 2: Sintetizando informa√ß√µes...")
        
        # Sintetizar os resultados
        resumo = sintetizar_informacoes(topico, resultados)
        
        return resumo
    except Exception as e:
        return f"Erro durante a pesquisa: {str(e)}"

# ====================================================================
# PARTE 5: INTERFACE SIMPLES
# ====================================================================
# Interface de linha de comando para interagir com o agente.
# ====================================================================

def interface_simples():
    """Interface simples para interagir com o agente de pesquisa."""
    print("="*70)
    print("ü§ñ AGENTE DE PESQUISA E S√çNTESE DA SMN")
    print("="*70)
    print("Este agente pesquisa informa√ß√µes e cria resumos concisos.")
    print("Digite o t√≥pico que deseja pesquisar ou 'sair' para encerrar.")
    print("="*70)
    
    while True:
        topico = input("\nüìö T√≥pico para pesquisa: ")
        
        if topico.lower() == "sair":
            print("\nüëã At√© a pr√≥xima!")
            break
        
        # Registrar hora de in√≠cio
        inicio = time.time()
        
        print("\nüîç Iniciando pesquisa e s√≠ntese. Isso pode levar alguns segundos...\n")
        
        try:
            resumo = pesquisar_e_sintetizar(topico)
            
            # Calcular tempo decorrido
            tempo = time.time() - inicio
            
            print("\nüìù RESUMO:\n")
            print(resumo)
            print(f"\n‚è±Ô∏è Pesquisa conclu√≠da em {tempo:.2f} segundos.")
            
        except Exception as e:
            print(f"‚ùå Ocorreu um erro: {str(e)}")
            print("Por favor, verifique sua conex√£o com a internet e a configura√ß√£o da API.")

# ====================================================================
# PARTE 6: EXECUTAR O AGENTE
# ====================================================================
# Executamos a interface se este arquivo for executado diretamente.
# ====================================================================

if __name__ == "__main__":
    interface_simples()
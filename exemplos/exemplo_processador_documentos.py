# ====================================================================
# AGENTE PROCESSADOR DE DOCUMENTOS
# ====================================================================
# Este agente extrai informa√ß√µes importantes de documentos como faturas,
# relat√≥rios e e-mails, facilitando a organiza√ß√£o e an√°lise de dados.
# ====================================================================

# Importamos as bibliotecas necess√°rias
import os
import re
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from langchain.prompts import ChatPromptTemplate
from langchain_community.document_loaders import PyPDFLoader, TextLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter

# Carregar configura√ß√µes do arquivo .env
load_dotenv()

# Chaves de API (nunca compartilhe estas chaves!)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# ====================================================================
# PARTE 1: CARREGAMENTO DE DOCUMENTOS
# ====================================================================
# Esta parte se encarrega de carregar diferentes tipos de documentos.
# ====================================================================

def carregar_documento(caminho_arquivo):
    """
    Carrega um documento baseado em sua extens√£o.
    
    Args:
        caminho_arquivo (str): Caminho para o arquivo
        
    Returns:
        list: Lista de segmentos de texto do documento
    """
    print(f"üìÑ Carregando documento: {caminho_arquivo}")
    
    # Verificar se o arquivo existe
    if not os.path.exists(caminho_arquivo):
        raise FileNotFoundError(f"Arquivo n√£o encontrado: {caminho_arquivo}")
    
    # Carregar baseado na extens√£o
    if caminho_arquivo.endswith('.pdf'):
        loader = PyPDFLoader(caminho_arquivo)
        paginas = loader.load()
        
        # Extrair o conte√∫do de cada p√°gina
        texto = "\n\n".join([pagina.page_content for pagina in paginas])
        
    elif caminho_arquivo.endswith('.txt'):
        loader = TextLoader(caminho_arquivo)
        documentos = loader.load()
        texto = documentos[0].page_content
        
    elif caminho_arquivo.endswith(('.docx', '.doc')):
        # Nota: Para arquivos Word, voc√™ precisaria instalar pacotes adicionais
        # como python-docx e adicionar o c√≥digo apropriado
        raise NotImplementedError("Suporte para arquivos Word ainda n√£o implementado neste exemplo")
        
    else:
        raise ValueError(f"Formato de arquivo n√£o suportado: {caminho_arquivo}")
    
    # Dividir o texto em segmentos menores para processamento
    divisor_texto = RecursiveCharacterTextSplitter(chunk_size=2000, chunk_overlap=200)
    segmentos = divisor_texto.split_text(texto)
    
    print(f"‚úÖ Documento carregado e dividido em {len(segmentos)} segmentos")
    
    return segmentos

# ====================================================================
# PARTE 2: EXTRA√á√ÉO DE INFORMA√á√ïES
# ====================================================================
# Esta parte analisa o texto e extrai informa√ß√µes estruturadas.
# ====================================================================

# Inicializar o modelo de linguagem
modelo = ChatOpenAI(openai_api_key=OPENAI_API_KEY, model_name="gpt-3.5-turbo")

# Template para extrair informa√ß√µes gerais
template_extracao_geral = """
Voc√™ √© um especialista em extrair informa√ß√µes relevantes de documentos de neg√≥cios.

Analise o seguinte segmento de texto e extraia as informa√ß√µes principais:

TEXTO:
{texto}

Extraia todas as informa√ß√µes relevantes no formato JSON, com campos apropriados para o tipo de documento.
Se n√£o conseguir identificar alguma informa√ß√£o, use "n√£o encontrado" como valor.

Se parecer um e-mail, extraia: remetente, destinat√°rios, assunto, data, mensagem principal e a√ß√µes requeridas.
Se parecer uma fatura, extraia: n√∫mero da fatura, data, fornecedor, cliente, itens, valores, total e prazo de pagamento.
Se parecer um relat√≥rio, extraia: t√≠tulo, data, autor, se√ß√µes principais e conclus√µes.
Se for outro tipo de documento, identifique o tipo e extraia as informa√ß√µes mais relevantes.

Formato JSON:
"""

prompt_extracao_geral = ChatPromptTemplate.from_template(template_extracao_geral)

# Template para extrair dados espec√≠ficos (como informa√ß√µes de contato)
template_extracao_contatos = """
Voc√™ √© um especialista em extrair informa√ß√µes de contato de documentos.

Analise o seguinte segmento de texto e extraia todas as informa√ß√µes de contato:

TEXTO:
{texto}

Extraia todas as seguintes informa√ß√µes no formato JSON:
- Nomes de pessoas
- Endere√ßos de e-mail
- N√∫meros de telefone
- Empresas/Organiza√ß√µes
- Endere√ßos f√≠sicos

Para cada tipo de informa√ß√£o, retorne uma lista, mesmo que vazia.
N√£o invente informa√ß√µes que n√£o estejam no texto.

Formato JSON:
"""

prompt_extracao_contatos = ChatPromptTemplate.from_template(template_extracao_contatos)

def extrair_informacoes(segmentos, tipo_extracao="geral"):
    """
    Extrai informa√ß√µes estruturadas de segmentos de texto.
    
    Args:
        segmentos (list): Lista de segmentos de texto
        tipo_extracao (str): Tipo de extra√ß√£o a realizar ('geral' ou 'contatos')
        
    Returns:
        list: Lista de resultados de extra√ß√£o
    """
    resultados = []
    
    # Selecionar o prompt apropriado
    if tipo_extracao == "contatos":
        prompt = prompt_extracao_contatos
    else:  # default para "geral"
        prompt = prompt_extracao_geral
    
    print(f"üîç Extraindo informa√ß√µes ({tipo_extracao}) de {len(segmentos)} segmentos...")
    
    # Processar cada segmento
    for i, segmento in enumerate(segmentos):
        print(f"  Processando segmento {i+1}/{len(segmentos)}...")
        
        # Preparar o prompt
        mensagens = prompt.format_messages(texto=segmento)
        
        # Enviar para o modelo e obter resposta
        resposta = modelo.invoke(mensagens)
        
        # Adicionar aos resultados
        resultados.append(resposta.content)
    
    return resultados

# ====================================================================
# PARTE 3: CONSOLIDA√á√ÉO DE RESULTADOS
# ====================================================================
# Esta parte combina resultados de m√∫ltiplos segmentos.
# ====================================================================

def consolidar_resultados(resultados_extracao, metadados_documento):
    """
    Consolida resultados de m√∫ltiplos segmentos em um √∫nico resumo.
    
    Args:
        resultados_extracao (list): Lista de resultados da extra√ß√£o
        metadados_documento (dict): Informa√ß√µes sobre o documento
        
    Returns:
        str: Resumo consolidado em formato JSON
    """
    # Template para consolida√ß√£o
    template_consolidacao = f"""
    Voc√™ √© um especialista em consolidar informa√ß√µes de diferentes partes de um documento.
    
    Informa√ß√µes sobre o documento:
    - Nome do arquivo: {metadados_documento.get('nome', 'Desconhecido')}
    - Tipo de arquivo: {metadados_documento.get('tipo', 'Desconhecido')}
    - Data de processamento: {metadados_documento.get('data_processamento', 'Desconhecida')}
    
    Abaixo est√£o os resultados da extra√ß√£o de informa√ß√µes de diferentes segmentos do documento.
    Consolide essas informa√ß√µes em um √∫nico JSON coerente, removendo duplica√ß√µes e organizando
    as informa√ß√µes de forma l√≥gica.
    
    Resultados da extra√ß√£o:
    {resultados_extracao}
    
    Resultado consolidado (em formato JSON):
    """
    
    # Preparar o prompt
    mensagens = ChatPromptTemplate.from_template(template_consolidacao).format_messages(
        resultados_extracao="\n\n".join(resultados_extracao)
    )
    
    # Enviar para o modelo e obter resposta
    resposta = modelo.invoke(mensagens)
    
    return resposta.content

# ====================================================================
# PARTE 4: FUN√á√ÉO PRINCIPAL DE PROCESSAMENTO
# ====================================================================
# Esta fun√ß√£o coordena todo o processo de an√°lise de documentos.
# ====================================================================

def processar_documento(caminho_arquivo, tipos_extracao=["geral"]):
    """
    Fun√ß√£o principal que processa um documento do in√≠cio ao fim.
    
    Args:
        caminho_arquivo (str): Caminho para o arquivo a ser processado
        tipos_extracao (list): Lista de tipos de extra√ß√£o a realizar
        
    Returns:
        dict: Resultados consolidados para cada tipo de extra√ß√£o
    """
    # Obter metadados b√°sicos do documento
    nome_arquivo = os.path.basename(caminho_arquivo)
    tipo_arquivo = os.path.splitext(nome_arquivo)[1]
    metadados = {
        "nome": nome_arquivo,
        "tipo": tipo_arquivo,
        "caminho": caminho_arquivo,
        "data_processamento": "2025-05-15"  # Em um sistema real, usaria a data atual
    }
    
    print(f"üîÑ Iniciando processamento do documento: {nome_arquivo}")
    
    # Carregar o documento
    segmentos = carregar_documento(caminho_arquivo)
    
    # Armazenar resultados para cada tipo de extra√ß√£o
    resultados_consolidados = {}
    
    # Processar cada tipo de extra√ß√£o solicitado
    for tipo in tipos_extracao:
        print(f"üîÑ Realizando extra√ß√£o do tipo: {tipo}")
        
        # Extrair informa√ß√µes
        resultados = extrair_informacoes(segmentos, tipo)
        
        # Consolidar resultados
        consolidado = consolidar_resultados(resultados, metadados)
        
        # Armazenar resultado consolidado
        resultados_consolidados[tipo] = consolidado
    
    print(f"‚úÖ Processamento conclu√≠do para: {nome_arquivo}")
    
    return resultados_consolidados

# ====================================================================
# PARTE 5: DOCUMENTO DE EXEMPLO
# ====================================================================
# Esta parte cria um documento de exemplo para demonstra√ß√£o.
# ====================================================================

def criar_documento_exemplo():
    """
    Cria um documento de exemplo para demonstrar o processador.
    
    Returns:
        str: Caminho para o documento criado
    """
    # Conte√∫do de exemplo (um relat√≥rio simples)
    conteudo_exemplo = """
    RELAT√ìRIO TRIMESTRAL DE PROJETOS - Q1 2025
    
    Autor: Maria Silva
    Data: 31/03/2025
    Departamento: Tecnologia
    
    SUM√ÅRIO EXECUTIVO
    
    O primeiro trimestre de 2025 apresentou avan√ßos significativos nos projetos estrat√©gicos da SMN. 
    Alcan√ßamos 87% das metas estabelecidas para o per√≠odo, com destaque para o lan√ßamento da plataforma SmartEco 
    que superou as expectativas iniciais de ado√ß√£o pelo mercado.
    
    PROJETOS EM ANDAMENTO
    
    1. Projeto SmartEco
       Status: Lan√ßado em 15/02/2025
       Or√ßamento: R$ 1.200.000,00
       Utiliza√ß√£o: 82%
       Principais marcos:
       - Lan√ßamento da vers√£o 1.0 (conclu√≠do)
       - Integra√ß√£o com sistemas de parceiros (em andamento - 65%)
       - Expans√£o para mercado internacional (planejado para Q2)
    
    2. Projeto DataConnect
       Status: Em desenvolvimento
       Or√ßamento: R$ 850.000,00
       Utiliza√ß√£o: 40%
       Principais marcos:
       - Finaliza√ß√£o da arquitetura (conclu√≠do)
       - Desenvolvimento do backend (em andamento - 78%)
       - Testes de integra√ß√£o (previsto para in√≠cio em 15/04/2025)
    
    3. Projeto GreenChain
       Status: Em fase inicial
       Or√ßamento: R$ 620.000,00
       Utiliza√ß√£o: 15%
       Principais marcos:
       - Pesquisa de mercado (conclu√≠do)
       - Defini√ß√£o de requisitos (em andamento - 45%)
       - Prototipagem (previsto para Q2)
    
    INDICADORES FINANCEIROS
    
    Total investido no trimestre: R$ 945.000,00
    Economia gerada por otimiza√ß√µes: R$ 120.000,00
    ROI projetado para 2025: 23%
    
    EQUIPE E RECURSOS
    
    Total de colaboradores alocados: 34
    Novas contrata√ß√µes no per√≠odo: 5
    √çndice de satisfa√ß√£o da equipe: 85%
    
    DESAFIOS E RISCOS
    
    1. Atrasos na cadeia de suprimentos afetando componentes para o Projeto GreenChain
       Mitiga√ß√£o: Identifica√ß√£o de fornecedores alternativos em andamento
    
    2. Escassez de desenvolvedores especializados em IA para o Projeto DataConnect
       Mitiga√ß√£o: Programa de capacita√ß√£o interna iniciado em fevereiro
    
    CONCLUS√ïES E PR√ìXIMOS PASSOS
    
    O trimestre demonstrou solidez na execu√ß√£o dos projetos principais, com desafios concentrados 
    principalmente em fatores externos. Para o Q2 2025, focaremos na internacionaliza√ß√£o do SmartEco
    e na acelera√ß√£o do desenvolvimento do DataConnect, com previs√£o de beta fechado para junho.
    
    Contatos para mais informa√ß√µes:
    
    Maria Silva - maria.silva@smn.com.br - (11) 98765-4321
    Jo√£o Oliveira (DataConnect) - joao.oliveira@smn.com.br
    Ana Mendes (GreenChain) - ana.mendes@smn.com.br - (11) 3456-7890
    
    SMN Tecnologia
    Av. Paulista, 1000, S√£o Paulo - SP
    contato@smn.com.br
    """
    
    # Criar arquivo tempor√°rio
    caminho_arquivo = "relatorio_exemplo.txt"
    with open(caminho_arquivo, "w", encoding="utf-8") as f:
        f.write(conteudo_exemplo)
    
    print(f"üìÑ Documento de exemplo criado: {caminho_arquivo}")
    
    return caminho_arquivo

# ====================================================================
# PARTE 6: INTERFACE SIMPLES
# ====================================================================
# Interface de linha de comando para interagir com o agente.
# ====================================================================

def interface_simples():
    """Interface simples para interagir com o processador de documentos."""
    print("="*70)
    print("ü§ñ AGENTE PROCESSADOR DE DOCUMENTOS DA SMN")
    print("="*70)
    print("Este agente extrai informa√ß√µes relevantes de documentos como relat√≥rios e e-mails.")
    print("Digite o caminho para um arquivo ou 'exemplo' para usar o documento de demonstra√ß√£o.")
    print("Digite 'sair' para encerrar.")
    print("="*70)
    
    while True:
        entrada = input("\nüìÑ Caminho do arquivo (ou 'exemplo' ou 'sair'): ")
        
        if entrada.lower() == "sair":
            print("\nüëã At√© a pr√≥xima!")
            break
        
        # Definir o caminho do arquivo
        if entrada.lower() == "exemplo":
            caminho_arquivo = criar_documento_exemplo()
        else:
            caminho_arquivo = entrada
        
        # Definir tipos de extra√ß√£o
        tipos_extracao = ["geral"]
        
        opcao = input("üîç Deseja extrair tamb√©m informa√ß√µes de contato? (s/n): ")
        if opcao.lower() == "s":
            tipos_extracao.append("contatos")
        
        print("\nüîÑ Iniciando processamento. Isso pode levar alguns minutos dependendo do tamanho do documento...\n")
        
        try:
            # Processar o documento
            resultados = processar_documento(caminho_arquivo, tipos_extracao)
            
            # Exibir resultados
            for tipo, resultado in resultados.items():
                print(f"\nüìä RESULTADO DA EXTRA√á√ÉO ({tipo.upper()}):\n")
                print(resultado)
                
                # Salvar em arquivo
                nome_arquivo = f"extracao_{tipo}_{os.path.basename(caminho_arquivo)}.json"
                with open(nome_arquivo, "w", encoding="utf-8") as f:
                    f.write(resultado)
                print(f"\n‚úÖ Resultado salvo em: {nome_arquivo}")
            
        except Exception as e:
            print(f"‚ùå Ocorreu um erro: {str(e)}")
            
        # Limpar arquivo de exemplo se necess√°rio
        if entrada.lower() == "exemplo" and os.path.exists("relatorio_exemplo.txt"):
            os.remove("relatorio_exemplo.txt")
            print("\nüßπ Arquivo de exemplo removido.")

# ====================================================================
# PARTE 7: EXECUTAR O AGENTE
# ====================================================================
# Executamos a interface se este arquivo for executado diretamente.
# ====================================================================

if __name__ == "__main__":
    interface_simples()
"""
Script para testar a integra√ß√£o com o Google Calendar
"""

import os
import sys
import datetime
import importlib.util

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Importar m√≥dulos necess√°rios
from dotenv import load_dotenv

def load_module_from_path(module_name, file_path):
    """Carrega um m√≥dulo Python a partir de um caminho de arquivo"""
    spec = importlib.util.spec_from_file_location(module_name, file_path)
    if spec is None:
        raise ImportError(f"N√£o foi poss√≠vel carregar o m√≥dulo {module_name} de {file_path}")
    
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module

def testar_google_calendar():
    """Fun√ß√£o para testar a integra√ß√£o com o Google Calendar"""
    print("=" * 70)
    print("TESTE DE INTEGRA√á√ÉO COM GOOGLE CALENDAR")
    print("=" * 70)
    
    # Carregar vari√°veis de ambiente
    load_dotenv()
    
    # Verificar configura√ß√µes necess√°rias
    variaveis_necessarias = [
        "GOOGLE_CLIENT_ID",
        "GOOGLE_CLIENT_SECRET",
        "GOOGLE_REFRESH_TOKEN"
    ]
    
    faltando = []
    for var in variaveis_necessarias:
        if not os.getenv(var):
            faltando.append(var)
    
    if faltando:
        print("‚ö†Ô∏è  As seguintes vari√°veis de ambiente est√£o faltando:")
        for var in faltando:
            print(f"   - {var}")
        print("\n‚öôÔ∏è  Para configurar, siga os passos:")
        print("   1. Crie um projeto no Google Cloud Console (https://console.cloud.google.com/)")
        print("   2. Ative a API do Google Calendar")
        print("   3. Configure a tela de consentimento OAuth")
        print("   4. Crie credenciais OAuth 2.0 para aplicativo de desktop")
        print("   5. Baixe o arquivo JSON e salve-o como client_secret.json")
        print("   6. Execute o script: python integracao/obter_token_google.py")
        print("   7. Adicione as credenciais obtidas ao seu arquivo .env")
        print("\n‚è≠Ô∏è  Pulando os testes de integra√ß√£o com o Google Calendar")
        return
    
    try:
        # Importar a integra√ß√£o com o Google Calendar
        from integracao.google_calendar import GoogleCalendarIntegration
        
        print("‚úÖ M√≥dulo GoogleCalendarIntegration importado com sucesso!")
        
        # Testar inicializa√ß√£o da classe de integra√ß√£o
        print("\nüîÑ Inicializando conex√£o com o Google Calendar...")
        try:
            calendar = GoogleCalendarIntegration()
            print("‚úÖ Conex√£o estabelecida com sucesso!")
        except Exception as e:
            print(f"‚ùå Erro ao inicializar a conex√£o: {str(e)}")
            print("‚ö†Ô∏è  Verifique se as credenciais est√£o corretas e se tem acesso √† API")
            return
        
        # Testar listagem de eventos
        print("\nüîÑ Testando listagem de eventos...")
        try:
            # Definir per√≠odo para os pr√≥ximos 30 dias
            agora = datetime.datetime.now()
            futuro = agora + datetime.timedelta(days=30)
            
            # Formatar datas no formato ISO
            time_min = agora.isoformat() + 'Z'
            time_max = futuro.isoformat() + 'Z'
            
            # Listar eventos
            eventos = calendar.listar_eventos(
                max_results=5,
                time_min=time_min,
                time_max=time_max
            )
            
            print(f"‚úÖ Listagem de eventos conclu√≠da! Encontrados: {len(eventos)} eventos")
            
            # Mostrar detalhes dos eventos encontrados
            if eventos:
                print("\nüìÖ DETALHES DOS EVENTOS:")
                print("-" * 50)
                for i, evento in enumerate(eventos[:3], 1):  # Mostrar at√© 3 eventos
                    inicio = evento.get('inicio', 'Hor√°rio n√£o definido')
                    titulo = evento.get('titulo', 'Sem t√≠tulo')
                    print(f"Evento {i}: {inicio} - {titulo}")
                
                if len(eventos) > 3:
                    print(f"... e mais {len(eventos) - 3} evento(s)")
        except Exception as e:
            print(f"‚ùå Erro ao listar eventos: {str(e)}")
        
        # Testar cria√ß√£o de evento
        print("\nüîÑ Testando cria√ß√£o de evento de teste...")
        try:
            # Definir data e hora para o evento (amanh√£ √†s 10h)
            amanha = datetime.datetime.now() + datetime.timedelta(days=1)
            inicio = amanha.replace(hour=10, minute=0, second=0, microsecond=0)
            fim = inicio + datetime.timedelta(hours=1)
            
            # Detalhes do evento
            titulo = f"Evento de Teste API - {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}"
            descricao = "Este √© um evento autom√°tico criado pelo script de teste de integra√ß√£o"
            
            # Verificar o email do usu√°rio no ambiente ou usar um valor padr√£o
            email_usuario = os.getenv("USER_EMAIL", "seu_email@example.com")
            participantes = [email_usuario]
            
            print(f"üìù Criando evento: '{titulo}'")
            evento_id = calendar.criar_evento(
                titulo=titulo,
                descricao=descricao,
                inicio=inicio.isoformat(),
                fim=fim.isoformat(),
                participantes=participantes
            )
            
            if evento_id:
                print(f"‚úÖ Evento criado com sucesso! ID: {evento_id}")
                
                # Testar exclus√£o do evento (opcional - comentado para n√£o excluir por padr√£o)
                # print("\nüîÑ Testando exclus√£o do evento...")
                # if calendar.excluir_evento(evento_id):
                #     print("‚úÖ Evento exclu√≠do com sucesso!")
                # else:
                #     print("‚ùå Falha ao excluir evento")
            else:
                print("‚ùå Falha ao criar evento")
        except Exception as e:
            print(f"‚ùå Erro ao criar evento: {str(e)}")
        
        print("\n‚úÖ Testes de integra√ß√£o com o Google Calendar conclu√≠dos!")
    
    except ImportError as e:
        print(f"‚ùå Erro ao importar m√≥dulos: {str(e)}")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {str(e)}")
        import traceback
        traceback.print_exc()
    
    print("=" * 70)
    print("TESTE CONCLU√çDO")
    print("=" * 70)

if __name__ == "__main__":
    testar_google_calendar()
